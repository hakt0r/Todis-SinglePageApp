{"version":3,"sources":["component/Add.js","lib.js","Model.js","component/Edit.js","component/View.js","component/List.js","logo.svg","App.js","serviceWorkerRegistration.js","index.js"],"names":["Add","props","useState","value","setValue","colspan","InputGroup","FormControl","onChange","e","target","Append","Button","onClick","addTodo","SET","k","v","localStorage","setItem","JSON","stringify","STATUS_TEXT","1","2","3","defaultState","list","content","status","date","Date","now","getItem","initialState","parse","TodisStore","children","state","setState","useEffect","newState","newTodo","addTodoGenerator","changeTodo","oldTodoIndex","findIndex","t","oldTodo","changeTodoGenerator","deleteTodo","filter","deleteTodoGenerator","toggleTodo","newStatus","toggleTodoGenerator","newChildren","React","cloneElement","id","Edit","todo","moment","fromNow","ButtonGroup","setEdit","variant","View","edit","List","Table","striped","bordered","hover","map","App","src","logo","className","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3965bf9a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Button, FormControl, InputGroup } from 'react-bootstrap';\n\nexport default function Add(props) {\n    const [ value, setValue ] = useState('');\n    function add(){\n        props.addTodo(value);\n        setValue('');\n    }\n    return (\n        <tr>\n            <th colspan={4}>\n                <InputGroup>\n                    <FormControl\n                        value={value}\n                        onChange={e => setValue(e.target.value)}\n                        />\n                    <InputGroup.Append>\n                        <Button onClick={add}>Add</Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </th>\n        </tr>\n    )\n}\n","\nexport const SET = (k,v)=>\n    localStorage.setItem(k,JSON.stringify(v));\n\nexport const GET = (k  )=>\n    JSON.parse(localStorage.getItem(k));\n","\nimport React, { useEffect, useState }        from 'react';\nimport { GET, SET } from './lib';\n\nexport const PENDING    = 1;\nexport const INPROGRESS = 2;\nexport const DONE       = 3;\n\nexport const STATUS_TEXT = {\n    1: 'Pending',\n    2: 'In Progress',\n    3: 'Done'\n}\n\nconst defaultState = {\n    list:[\n        { content:\"Test\", status:PENDING, date: Date.now() }\n    ]\n}\n\nif ( ! localStorage.getItem('todis-store') ){\n    SET('todis-store', defaultState);\n}\n\nconst initialState = GET('todis-store');\n\nconst addTodoGenerator = (state,setState)=> (content)=> {\n    // if ( current state contains a content equal to content ) return;\n    const newState = {...state};\n    const newTodo  = {\n        content:content,\n        date:Date.now(),\n        status:PENDING\n    }\n    newState.list = [...state.list, newTodo];\n    setState(newState);\n}\n\nconst changeTodoGenerator = (state,setState)=> (date,content)=> {\n    // if ( current state contains a content equal to content ) return;\n    const newState = { ...state };\n    const oldTodoIndex  = state.list.findIndex( t => t.date === date );\n    if ( oldTodoIndex === -1 ) return;\n    const oldTodo  = state.list[oldTodoIndex];\n    const newTodo  = { ...oldTodo, content:content }; \n    newState.list  = [ ...state.list ];\n    newState.list[oldTodoIndex] = newTodo;\n    setState(newState);\n}\n\nconst toggleTodoGenerator = (state,setState)=> (date)=> {\n    const newState = { ...state };\n\n    const oldTodoIndex  = state.list.findIndex( t => t.date === date );\n    if ( oldTodoIndex === -1 ) return;\n    \n    const oldTodo  = state.list[oldTodoIndex];\n    \n    let newStatus;\n\n    switch ( oldTodo.status ){\n        case PENDING:    newStatus = INPROGRESS; break;\n        case INPROGRESS: newStatus = DONE; break;\n        case DONE:       newStatus = PENDING; break;\n        default:         newStatus = PENDING;\n    }\n\n    const newTodo  = { ...oldTodo, status:newStatus }; \n\n    newState.list  = [ ...state.list ];\n    newState.list[oldTodoIndex] = newTodo;\n\n    setState(newState);\n}\n\nconst deleteTodoGenerator = (state,setState)=> (date)=> {\n    const newState = { ...state };\n    newState.list = state.list.filter( t => t.date !== date );\n    setState(newState);\n}\n\nexport default function TodisStore( { children } ) {\n    const [ state, setState ] = useState(initialState);\n    useEffect( ()=> SET('todis-store',state), [state] );\n    const addTodo    = addTodoGenerator(state,setState);\n    const changeTodo = changeTodoGenerator(state,setState);\n    const deleteTodo = deleteTodoGenerator(state,setState);\n    const toggleTodo = toggleTodoGenerator(state,setState);\n    // children is on the the App component in this case\n    // usually it would be an array of elements...\n    const newChildren = React.cloneElement( children, {\n        state,\n        addTodo,\n        changeTodo,\n        deleteTodo,\n        toggleTodo\n    })\n    return <div id=\"store\">{newChildren}</div>;\n}","\nimport React, { useState } from 'react';\nimport moment from 'moment';\n\nimport {\n    STATUS_TEXT\n} from '../Model';\nimport { FormControl, Button, ButtonGroup } from 'react-bootstrap';\n\nexport default function Edit(props) {\n    const todo = props.todo;\n    const [ value, setValue ] = useState(todo.content);\n    function save(){\n        props.changeTodo(todo.date,value);\n        props.setEdit(false);\n    }\n    function cancel (){\n        props.setEdit(false);\n    }\n    return (\n        <tr>\n            <td>{moment(todo.date).fromNow()}</td>\n            <td>\n                <FormControl\n                    value={value}\n                    onChange={ e => setValue(e.target.value) }\n                />\n            </td>\n            <td>{STATUS_TEXT[todo.status]}</td>\n            <td>\n                <ButtonGroup>\n                    <Button onClick={save}>Save</Button>\n                    <Button onClick={cancel} variant=\"danger\">Cancel</Button>\n                </ButtonGroup>\n            </td>\n        </tr>\n    )\n}\n","\nimport React, { useState } from 'react';\nimport moment from 'moment';\n\nimport {\n    STATUS_TEXT\n} from '../Model';\nimport { Button } from 'react-bootstrap';\nimport Edit from './Edit';\nimport { ButtonGroup } from 'react-bootstrap';\n\nexport default function View(props) {\n    const [ edit, setEdit ] = useState(false);\n    const todo = props.todo;\n    if ( edit ) return <Edit {...props} setEdit={setEdit} />;\n    return (\n        <tr>\n            <td>{moment(todo.date).fromNow()}</td>\n            <td>{todo.content}</td>\n            <td>\n                <Button onClick={ e => props.toggleTodo(todo.date) }>\n                    {STATUS_TEXT[todo.status]}\n                </Button>\n            </td>\n            <td>\n                <ButtonGroup>\n                    <Button\n                        onClick={ e => setEdit(true) }\n                        >Edit</Button>\n                    <Button\n                        variant=\"danger\"\n                        onClick={ e => props.deleteTodo(todo.date) }\n                        >Delete</Button>\n                </ButtonGroup>\n            </td>\n        </tr>\n    )\n}\n","import React, { useState } from 'react'\nimport { Button, Form, FormControl, Table } from 'react-bootstrap';\nimport Add from './Add';\nimport View from './View';\n\nexport default function List(props) {\n    const [value, setValue] = useState('');\n    const state = props.state;\n    return (\n        <Table striped bordered hover>\n        <thead>\n            <Add {...props}/>\n            <tr>\n                <th>Date</th>\n                <th>Description</th>\n                <th>Status</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            { state.list.map( todo =>\n                <View {...props} todo={todo}/>\n            )}\n        </tbody>\n    </Table> )\n}\n","export default __webpack_public_path__ + \"static/media/logo.f6a13849.svg\";","\nimport React from 'react';\nimport List  from './component/List';\nimport logo  from './logo.svg';\nimport './App.scss';\n\nfunction App(props) {\n  const { addTodo, changeTodo, deleteTodo, toggleTodo, state } = props;\n  // const addTodo = props.addTodo ...\n\n  return ( <>\n    <img src={logo} className=\"logo\" alt=\"logo\" />\n    <List {...props}/>\n    </> );\n  }\n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React      from 'react';\nimport ReactDOM   from 'react-dom';\nimport App        from './App';\nimport TodisStore from './Model';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <TodisStore>\n        <App/>\n      </TodisStore>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}