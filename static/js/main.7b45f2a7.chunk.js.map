{"version":3,"sources":["component/Add.js","lib.js","Model.js","component/Edit.js","component/View.js","component/List.js","logo.svg","App.js","serviceWorkerRegistration.js","index.js"],"names":["Add","props","useState","value","setValue","add","addTodo","colSpan","InputGroup","FormControl","onChange","e","target","onKeyPress","key","Append","Button","onClick","SET","k","v","localStorage","setItem","JSON","stringify","STATUS_TEXT","1","2","3","STATUS_ICONS","STATUS_VARIANT","defaultState","list","content","status","date","Date","now","getItem","initialState","parse","TodisStore","children","state","setState","useEffect","newState","newTodo","addTodoGenerator","changeTodo","oldTodoIndex","findIndex","t","oldTodo","changeTodoGenerator","deleteTodo","filter","deleteTodoGenerator","toggleTodo","toggleTodoGenerator","newChildren","React","cloneElement","id","Edit","todo","title","setEdit","variant","View","edit","view","setView","expand","length","slice","Badge","Dropdown","Toggle","Menu","Item","Divider","moment","fromNow","List","Table","striped","bordered","hover","map","index","App","src","logo","className","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"6NAIe,SAASA,EAAIC,GAAQ,IAAD,EACHC,mBAAS,IADN,mBACvBC,EADuB,KAChBC,EADgB,KAE/B,SAASC,IACLJ,EAAMK,QAAQH,GACdC,EAAS,IAEb,OACI,6BACI,oBAAIG,QAAS,EAAb,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIN,MAAOA,EACPO,SAAU,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOT,QACjCU,WAAa,SAAAF,GAAsB,UAAVA,EAAEG,KAAkBT,OAEjD,cAACG,EAAA,EAAWO,OAAZ,UACI,cAACC,EAAA,EAAD,CAAQC,QAASZ,EAAjB,SACI,cAAC,IAAD,e,6BCpBfa,EAAM,SAACC,EAAEC,GAAH,OACfC,aAAaC,QAAQH,EAAEI,KAAKC,UAAUJ,KCO7BK,EAAc,CACvBC,EAAG,UACHC,EAAG,cACHC,EAAG,QAGMC,EAAe,CACxBH,EAAG,cAAC,IAAD,IACHC,EAAG,cAAC,IAAD,IACHC,EAAG,cAAC,IAAD,KAGME,EAAiB,CAC1BJ,EAAG,YACHC,EAAG,UACHC,EAAG,WAGDG,EAAe,CACjBC,KAAK,CACD,CAAEC,QAAQ,OAAQC,OAxBA,EAwBgBC,KAAMC,KAAKC,SAI9ChB,aAAaiB,QAAQ,gBACxBpB,EAAI,cAAea,GAGvB,IDjCoBZ,ECiCdoB,GDjCcpB,ECiCK,cDhCrBI,KAAKiB,MAAMnB,aAAaiB,QAAQnB,KCgFrB,SAASsB,EAAT,GAAqC,IAAdC,EAAa,EAAbA,SAAa,EACnBxC,mBAASqC,GADU,mBACvCI,EADuC,KAChCC,EADgC,KAE/CC,qBAAW,kBAAK3B,EAAI,cAAcyB,KAAQ,CAACA,IAC3C,IAAMrC,EAjDe,SAACqC,EAAMC,GAAP,OAAmB,SAACX,GAEzC,IAAMa,EAAQ,eAAOH,GACfI,EAAW,CACbd,QAAQA,EACRE,KAAKC,KAAKC,MACVH,OAxCkB,GA0CtBY,EAASd,KAAT,CAAkBe,GAAlB,mBAA8BJ,EAAMX,OACpCY,EAASE,IAwCUE,CAAiBL,EAAMC,GACpCK,EAtCkB,SAACN,EAAMC,GAAP,OAAmB,SAACT,EAAKF,GAEjD,IAAMa,EAAQ,eAAQH,GAChBO,EAAgBP,EAAMX,KAAKmB,WAAW,SAAAC,GAAC,OAAIA,EAAEjB,OAASA,KAC5D,IAAuB,IAAlBe,EAAL,CACA,IAAMG,EAAWV,EAAMX,KAAKkB,GACtBH,EAAO,2BAASM,GAAT,IAAkBpB,QAAQA,IACvCa,EAASd,KAAT,YAAsBW,EAAMX,MAC5Bc,EAASd,KAAKkB,GAAgBH,EAC9BH,EAASE,KA6BUQ,CAAoBX,EAAMC,GACvCW,EAXkB,SAACZ,EAAMC,GAAP,OAAmB,SAACT,GAC5C,IAAMW,EAAQ,eAAQH,GACtBG,EAASd,KAAOW,EAAMX,KAAKwB,QAAQ,SAAAJ,GAAC,OAAIA,EAAEjB,OAASA,KACnDS,EAASE,IAQUW,CAAoBd,EAAMC,GACvCc,EA5BkB,SAACf,EAAMC,GAAP,OAAmB,SAACT,EAAKD,GACjD,IAAMY,EAAQ,eAAQH,GAEhBO,EAAgBP,EAAMX,KAAKmB,WAAW,SAAAC,GAAC,OAAIA,EAAEjB,OAASA,KAC5D,IAAuB,IAAlBe,EAAL,CAEA,IAAMG,EAAWV,EAAMX,KAAKkB,GAEtBH,EAAO,2BAASM,GAAT,IAAkBnB,WAE/BY,EAASd,KAAT,YAAsBW,EAAMX,MAC5Bc,EAASd,KAAKkB,GAAgBH,EAE9BH,EAASE,KAeUa,CAAoBhB,EAAMC,GAGvCgB,EAAcC,IAAMC,aAAcpB,EAAU,CAC9CC,QACArC,UACA2C,aACAM,aACAG,eAEJ,OAAO,qBAAKK,GAAG,QAAR,SAAiBH,I,oBC/Fb,SAASI,EAAK/D,GACzB,IAAMgE,EAAOhE,EAAMgE,KADa,EAEJ/D,mBAAS+D,EAAKhC,SAFV,mBAExB9B,EAFwB,KAEjBC,EAFiB,KAUhC,OACI,6BACI,oBAAIG,QAAS,EAAb,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIN,MAAOA,EACPO,SAAW,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOT,UAEtC,eAACK,EAAA,EAAWO,OAAZ,WACI,cAACC,EAAA,EAAD,CAAQkD,MAAM,OAAOjD,QAhBzC,WACIhB,EAAMgD,WAAWgB,EAAK9B,KAAKhC,GAC3BF,EAAMkE,SAAQ,IAcE,SACI,cAAC,IAAD,MAEJ,cAACnD,EAAA,EAAD,CAAQkD,MAAM,SAASjD,QAf3C,WACIhB,EAAMkE,SAAQ,IAc0CC,QAAQ,SAAhD,SAAyD,cAAC,IAAD,gBCVlE,SAASC,EAAKpE,GAAQ,IAAD,EACNC,oBAAS,GADH,mBACxBoE,EADwB,KAClBH,EADkB,OAENjE,oBAAS,GAFH,mBAExBqE,EAFwB,KAElBC,EAFkB,KAG1BP,EAAOhE,EAAMgE,KACfhC,EAAUgC,EAAKhC,QACfwC,EAAU,KAQd,OAPKxC,EAAQyC,OAAS,MAClBzC,EAAUsC,EAAOtC,EAAUgC,EAAKhC,QAAQ0C,MAAM,EAAE,KAChDF,EAAS,cAACG,EAAA,EAAD,CACL3D,QAAS,SAAAN,GAAC,OAAI6D,GAASD,IACvBH,QAAQ,OAFH,SAGNG,EAAO,OAAS,UAElBD,EAAc,cAACN,EAAD,2BAAU/D,GAAV,IAAiBkE,QAASA,KAEzC,+BACI,6BACI,eAACU,EAAA,EAAD,WACI,cAACA,EAAA,EAASC,OAAV,CAAiBV,QAAStC,EAAemC,EAAK/B,QAA9C,SACKL,EAAaoC,EAAK/B,UAEvB,eAAC2C,EAAA,EAASE,KAAV,WACQ,eAACF,EAAA,EAASG,KAAV,CAAe/D,QAAS,SAAAN,GAAC,OAAIV,EAAMyD,WAAWO,EAAK9B,KFnCrD,IEmCE,UACI,cAACyC,EAAA,EAAD,CAAOR,QAAStC,EFpCtB,GEoCM,SACKD,EFrCX,KEmCE,IAGcJ,EFtChB,MEyCE,eAACoD,EAAA,EAASG,KAAV,CAAe/D,QAAS,SAAAN,GAAC,OAAIV,EAAMyD,WAAWO,EAAK9B,KFxCrD,IEwCE,UACI,cAACyC,EAAA,EAAD,CAAOR,QAAStC,EFzCtB,GEyCM,SACKD,EF1CX,KEwCE,IAGcJ,EF3ChB,ME8CE,eAACoD,EAAA,EAASG,KAAV,CAAe/D,QAAS,SAAAN,GAAC,OAAIV,EAAMyD,WAAWO,EAAK9B,KF7CrD,IE6CE,UACI,cAACyC,EAAA,EAAD,CAAOR,QAAStC,EF9CtB,GE8CM,SACKD,EF/CX,KE6CE,IAGcJ,EFhDhB,MEoDE,cAACoD,EAAA,EAASI,QAAV,IAEA,eAACJ,EAAA,EAASG,KAAV,CAAe/D,QAAU,SAAAN,GAAC,OAAIwD,GAAQ,IAAtC,UACI,cAACS,EAAA,EAAD,CAAOR,QAAQ,UAAf,SACI,cAAC,IAAD,MAFR,WAMA,eAACS,EAAA,EAASG,KAAV,CAAe/D,QAAU,SAAAN,GAAC,OAAIV,EAAMsD,WAAWU,EAAK9B,OAApD,UACI,cAACyC,EAAA,EAAD,CAAOR,QAAQ,SAAf,SACI,cAAC,IAAD,MAFR,qBAShB,+BACKnC,EAAQ,uBACT,cAAC2C,EAAA,EAAD,CAAOR,QAAQ,UAAf,SAA0Bc,IAAOjB,EAAK9B,MAAMgD,YAFhD,OAIKV,QC3EF,SAASW,EAAKnF,GACzB,IAAM0C,EAAQ1C,EAAM0C,MACpB,OACI,eAAC0C,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACA,gCACI,cAACxF,EAAD,eAASC,MAEb,gCACM0C,EAAMX,KAAKyD,KAAK,SAACxB,EAAKyB,GAAN,OACd,wBAACrB,EAAD,2BAAUpE,GAAV,IAAiBgE,KAAMA,EAAMnD,IAAK4E,aCdnC,UAA0B,iC,MCa1BC,MAPf,SAAa1F,GACX,OAAS,qCACP,qBAAK2F,IAAKC,EAAMC,UAAU,OAAOC,IAAI,SACrC,cAACX,EAAD,eAAUnF,QCGR+F,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpE,QACf8D,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,+GAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,kBCpFjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAClF,EAAD,UACE,cAAC,EAAD,UAINmF,SAASC,eAAe,SDEnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,uBAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,uBAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAACyB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASnG,QACO,MAAfoG,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAACC,GAClCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IAAI,oEAtFVwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,OC3B/BqC,K","file":"static/js/main.7b45f2a7.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Button, FormControl, InputGroup } from 'react-bootstrap';\nimport { MdAdd } from \"react-icons/md\";\n\nexport default function Add(props) {\n    const [ value, setValue ] = useState('');\n    function add(){\n        props.addTodo(value);\n        setValue('');\n    }\n    return (\n        <tr>\n            <th colSpan={2}>\n                <InputGroup>\n                    <FormControl\n                        value={value}\n                        onChange={e => setValue(e.target.value)}\n                        onKeyPress={ e => { if ( e.key === \"Enter\" ) add() } }\n                        />\n                    <InputGroup.Append>\n                        <Button onClick={add}>\n                            <MdAdd/>\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </th>\n        </tr>\n    )\n}\n","\nexport const SET = (k,v)=>\n    localStorage.setItem(k,JSON.stringify(v));\n\nexport const GET = (k  )=>\n    JSON.parse(localStorage.getItem(k));\n","\nimport React, { useEffect, useState }        from 'react';\nimport { MdDone, MdAccessTime, MdSnooze } from 'react-icons/md';\nimport { GET, SET } from './lib';\n\nexport const PENDING    = 1;\nexport const INPROGRESS = 2;\nexport const DONE       = 3;\n\nexport const STATUS_TEXT = {\n    1: 'Pending',\n    2: 'In Progress',\n    3: 'Done'\n}\n\nexport const STATUS_ICONS = {\n    1: <MdSnooze/>,\n    2: <MdAccessTime/>,\n    3: <MdDone/>\n}\n\nexport const STATUS_VARIANT = {\n    1: \"secondary\",\n    2: \"warning\",\n    3: \"success\"\n}\n\nconst defaultState = {\n    list:[\n        { content:\"Test\", status:PENDING, date: Date.now() }\n    ]\n}\n\nif ( ! localStorage.getItem('todis-store') ){\n    SET('todis-store', defaultState);\n}\n\nconst initialState = GET('todis-store');\n\nconst addTodoGenerator = (state,setState)=> (content)=> {\n    // if ( current state contains a content equal to content ) return;\n    const newState = {...state};\n    const newTodo  = {\n        content:content,\n        date:Date.now(),\n        status:PENDING\n    }\n    newState.list = [ newTodo, ...state.list ];\n    setState(newState);\n}\n\nconst changeTodoGenerator = (state,setState)=> (date,content)=> {\n    // if ( current state contains a content equal to content ) return;\n    const newState = { ...state };\n    const oldTodoIndex  = state.list.findIndex( t => t.date === date );\n    if ( oldTodoIndex === -1 ) return;\n    const oldTodo  = state.list[oldTodoIndex];\n    const newTodo  = { ...oldTodo, content:content }; \n    newState.list  = [ ...state.list ];\n    newState.list[oldTodoIndex] = newTodo;\n    setState(newState);\n}\n\nconst toggleTodoGenerator = (state,setState)=> (date,status)=> {\n    const newState = { ...state };\n\n    const oldTodoIndex  = state.list.findIndex( t => t.date === date );\n    if ( oldTodoIndex === -1 ) return;\n    \n    const oldTodo  = state.list[oldTodoIndex];\n\n    const newTodo  = { ...oldTodo, status }; \n\n    newState.list  = [ ...state.list ];\n    newState.list[oldTodoIndex] = newTodo;\n\n    setState(newState);\n}\n\nconst deleteTodoGenerator = (state,setState)=> (date)=> {\n    const newState = { ...state };\n    newState.list = state.list.filter( t => t.date !== date );\n    setState(newState);\n}\n\nexport default function TodisStore( { children } ) {\n    const [ state, setState ] = useState(initialState);\n    useEffect( ()=> SET('todis-store',state), [state] );\n    const addTodo    = addTodoGenerator(state,setState);\n    const changeTodo = changeTodoGenerator(state,setState);\n    const deleteTodo = deleteTodoGenerator(state,setState);\n    const toggleTodo = toggleTodoGenerator(state,setState);\n    // children is on the the App component in this case\n    // usually it would be an array of elements...\n    const newChildren = React.cloneElement( children, {\n        state,\n        addTodo,\n        changeTodo,\n        deleteTodo,\n        toggleTodo\n    })\n    return <div id=\"store\">{newChildren}</div>;\n}","\nimport React, { useState } from 'react';\n\nimport { FormControl, Button, InputGroup } from 'react-bootstrap';\nimport { MdSave, MdCancel } from 'react-icons/md';\n\nexport default function Edit(props) {\n    const todo = props.todo;\n    const [ value, setValue ] = useState(todo.content);\n    function save(){\n        props.changeTodo(todo.date,value);\n        props.setEdit(false);\n    }\n    function cancel (){\n        props.setEdit(false);\n    }\n    return (\n        <tr>\n            <td colSpan={2}>\n                <InputGroup>\n                    <FormControl\n                        value={value}\n                        onChange={ e => setValue(e.target.value) }\n                    />\n                    <InputGroup.Append>\n                        <Button title=\"Save\" onClick={save}>\n                            <MdSave/>\n                        </Button>\n                        <Button title=\"Cancel\" onClick={cancel} variant=\"danger\"><MdCancel/></Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </td>\n        </tr>\n    )\n}\n","\nimport React, { useState } from 'react';\nimport moment from 'moment';\n\nimport {\n    STATUS_ICONS,\n    STATUS_TEXT,\n    STATUS_VARIANT,\n    PENDING,\n    INPROGRESS,\n    DONE\n} from '../Model';\n\nimport { Badge, Dropdown } from 'react-bootstrap';\n\nimport Edit from './Edit';\nimport { MdDelete, MdEdit } from 'react-icons/md';\n\nexport default function View(props) {\n    const [ edit, setEdit ] = useState(false);\n    const [ view, setView ] = useState(false);\n    const todo = props.todo;\n    let content = todo.content;\n    let expand  = null; \n    if ( content.length > 300 ){\n        content = view ? content : todo.content.slice(0,256);\n        expand = <Badge\n            onClick={e => setView(!view)}\n            variant=\"dark\"\n        >{ view ? \"less\" : \"more\" }</Badge>\n    }\n    if ( edit ) return <Edit {...props} setEdit={setEdit} />;\n    return (\n        <tr>\n            <td>\n                <Dropdown>\n                    <Dropdown.Toggle variant={STATUS_VARIANT[todo.status]}>\n                        {STATUS_ICONS[todo.status]}\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                            <Dropdown.Item onClick={e => props.toggleTodo(todo.date,PENDING)}>\n                                <Badge variant={STATUS_VARIANT[PENDING]}>\n                                    {STATUS_ICONS[PENDING]}\n                                </Badge> {STATUS_TEXT[PENDING]}\n                            </Dropdown.Item>\n\n                            <Dropdown.Item onClick={e => props.toggleTodo(todo.date,INPROGRESS)}>\n                                <Badge variant={STATUS_VARIANT[INPROGRESS]}>\n                                    {STATUS_ICONS[INPROGRESS]}\n                                </Badge> {STATUS_TEXT[INPROGRESS]}\n                            </Dropdown.Item>\n\n                            <Dropdown.Item onClick={e => props.toggleTodo(todo.date,DONE)}>\n                                <Badge variant={STATUS_VARIANT[DONE]}>\n                                    {STATUS_ICONS[DONE]}\n                                </Badge> {STATUS_TEXT[DONE]}\n                            </Dropdown.Item>\n\n\n                            <Dropdown.Divider/>\n\n                            <Dropdown.Item onClick={ e => setEdit(true) }>\n                                <Badge variant=\"primary\">\n                                    <MdEdit/>\n                                </Badge> Edit\n                            </Dropdown.Item>\n\n                            <Dropdown.Item onClick={ e => props.deleteTodo(todo.date) }>\n                                <Badge variant=\"danger\">\n                                    <MdDelete/>\n                                </Badge> Delete\n                            </Dropdown.Item>\n\n                        </Dropdown.Menu>\n                </Dropdown>\n            </td>\n            <td>\n                {content}<br/>\n                <Badge variant=\"primary\">{moment(todo.date).fromNow()}</Badge>\n                &nbsp;\n                {expand}\n            </td>\n        </tr>\n    )\n}\n","import React from 'react'\nimport { Table } from 'react-bootstrap';\nimport Add from './Add';\nimport View from './View';\n\nexport default function List(props) {\n    const state = props.state;\n    return (\n        <Table striped bordered hover>\n        <thead>\n            <Add {...props}/>\n        </thead>\n        <tbody>\n            { state.list.map( (todo,index) =>\n                <View {...props} todo={todo} key={index}/>\n            )}\n        </tbody>\n    </Table> )\n}\n","export default __webpack_public_path__ + \"static/media/logo.f6a13849.svg\";","\nimport React from 'react';\nimport List  from './component/List';\nimport logo  from './logo.svg';\nimport './App.scss';\n\nfunction App(props) {\n  return ( <>\n    <img src={logo} className=\"logo\" alt=\"logo\" />\n    <List {...props}/>\n    </> );\n  }\n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React      from 'react';\nimport ReactDOM   from 'react-dom';\nimport App        from './App';\nimport TodisStore from './Model';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <TodisStore>\n        <App/>\n      </TodisStore>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}